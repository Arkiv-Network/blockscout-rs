syntax = "proto3";

package blockscout.blockscoutSmartContracts.v1;

option go_package = "github.com/blockscout/blockscout-rs/blockscout-smart-contracts";

import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "convert/convert_options.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Blockscout Smart Contracts service"
    version: "0.1.1"
    contact: {
      name: "Blockscout"
      url: "https://blockscout.com"
      email: "support@blockscout.com"
    }
  }
  host: "blockscout-smart-contracts.services.blockscout.com"
  schemes: [HTTPS]
  external_docs: {
    url: "https://github.com/blockscout/blockscout-rs"
    description: "More about blockscout microservices"
  }
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "x-api-key"
      }
    }
  }
};



service SmartContractService {
  rpc SmartContractServiceCreate(SmartContractServiceCreateRequest) returns (SmartContractServiceCreateResponse) {}
  rpc SmartContractServiceGet(SmartContractServiceGetRequest) returns (SmartContractServiceGetResponse) {}
  
}

message SmartContract {
  string chain_id = 1;
  string address = 2;
  string blockscout_url = 3 [(convert_options.convert) = {type: "url::Url"}];
  map<string, string> sources = 4;
}

message SmartContractServiceCreateRequest {
  SmartContract contract = 1;
}

message SmartContractServiceCreateResponse {

}

message SmartContractServiceGetRequest {
  string chain_id = 1;
  string address = 2;
}

message SmartContractServiceGetResponse {
  SmartContract contract = 1;
}