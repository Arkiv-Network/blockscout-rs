//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

//*
// var TxFinalizationStatus_name = map[int32]string{
// 	0: "NotFinalized",
// 	1: "Finalized",
// 	2: "Executed",
// }
//*
#[derive(Clone, Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Text")]
pub enum TxFinalizationStatus {
    #[sea_orm(string_value = "NotFinalized")]
    NotFinalized,
    #[sea_orm(string_value = "Finalized")]
    Finalized,
    #[sea_orm(string_value = "Executed")]
    Executed,
}

impl From<String> for TxFinalizationStatus {
    fn from(value: String) -> Self {
        match value.as_str() {
            "NotFinalized" => TxFinalizationStatus::NotFinalized,
            "Finalized" => TxFinalizationStatus::Finalized,
            "Executed" => TxFinalizationStatus::Executed,
            _ => panic!("Invalid TxFinalizationStatus: {}", value),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "inbound_params")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub cross_chain_tx_id: i32,
    pub sender: String,
    pub sender_chain_id: String,
    pub tx_origin: String,
    pub coin_type: String,
    pub asset: Option<String>,
    pub amount: String,
    pub observed_hash: String,
    pub observed_external_height: String,
    pub ballot_index: String,
    pub finalized_zeta_height: String,
    pub tx_finalization_status: TxFinalizationStatus,
    pub is_cross_chain_call: bool,
    pub status: String,
    pub confirmation_mode: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cross_chain_tx::Entity",
        from = "Column::CrossChainTxId",
        to = "super::cross_chain_tx::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    CrossChainTx,
}

impl Related<super::cross_chain_tx::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrossChainTx.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
